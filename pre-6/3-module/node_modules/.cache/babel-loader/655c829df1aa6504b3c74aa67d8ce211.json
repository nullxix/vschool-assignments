{"ast":null,"code":"import _slicedToArray from \"/Users/mymac/dev/vschool/assignments/3-module/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mymac/dev/vschool/assignments/3-module/src/apps/dj/App.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport LightGrid from \"./components/LightGrid\";\nimport ButtonContainer from \"./components/ButtonContainer\";\nimport \"./styles.css\"; // import url(\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.css\")\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.actions = {\n      \"mask\": () => {\n        console.log(\"mask\");\n        /*make active + opposite black, if either black then both white*/\n\n        let newColor = 0;\n        if (this.state.gridColors[this.state.selectorIndex] === this.colorOptions[0] || this.state.gridColors[this.internal.getOpposite()] === this.colorOptions[0]) newColor = 1;\n        this.internal.setColor([this.state.selectorIndex, this.internal.getOpposite()], [newColor, newColor]);\n        this.internal.advance();\n      },\n      \"spider\": () => {\n        /*Random color, switch direction*/\n        this.internal.setColor([this.state.selectorIndex], [this.internal.generateRandomColor()]);\n        this.internal.reverse();\n        this.internal.advance();\n      },\n      \"camera\": () => {\n        /*opposite + previous shift back one color \n            we're pretending previous position is index - 1 (spoiler: it's not)\n            because I'm lazy.\n            I could definitely write this correctly if I wanted to.\n        */\n        let prevIndex = this.state.selectorIndex - 1;\n        let oppIndex = this.internal.getOpposite(); //get the current colors\n\n        let colorPrevIndex = this.colorOptions.indexOf(this.state.gridColors[prevIndex]);\n        let colorOppIndex = this.colorOptions.indexOf(this.state.gridColors[oppIndex]); //shift the current colors back one\n        //(or loop around if color is at index 0)\n\n        colorPrevIndex > 0 ? colorPrevIndex-- : colorPrevIndex = this.colorOptions.length;\n        colorOppIndex > 0 ? colorOppIndex-- : colorOppIndex = this.colorOptions.length;\n        this.internal.setColor([prevIndex, oppIndex], [colorPrevIndex, colorOppIndex]);\n        this.internal.advance();\n      },\n      \"kiwi\": () => {\n        console.log();\n      },\n      \"lemon\": () => {\n        console.log();\n      },\n      \"death\": () => {\n        console.log();\n      },\n      \"d20\": () => {\n        console.log();\n      }\n    };\n    this.internal = {\n      advance: () => {\n        /*\n            grid layout\n            0 1\n            2 3\n             desired movements (opposite if direction reversed)\n            0 -> 1\n            1 -> 3\n            2 -> 0\n            3 -> 2\n        */\n        let newIndex = this.state.selectorIndex;\n        let dir = this.state.direction === 1 && true;\n\n        switch (newIndex) {\n          case 0:\n            newIndex = dir ? 1 : 3;\n            break;\n\n          case 1:\n            newIndex = dir ? 3 : 0;\n            break;\n\n          case 2:\n            newIndex = dir ? 0 : 3;\n            break;\n\n          case 3:\n            newIndex = dir ? 2 : 1;\n            break;\n        }\n\n        this.internal.setPosition(newIndex);\n      },\n      reverse: () => {\n        let newDirection = -1; //1 is forwards, -1 is backwards\n\n        if (this.state.direction === -1) newDirection = 1;\n        this.setState({\n          direction: newDirection\n        });\n      },\n      setColor: (which, newColor) => {\n        console.log(\"Setting-\", ...which, \"to\", ...newColor);\n        let newColors = [...this.state.gridColors];\n\n        for (let i = 0; i < which.length; i++) {\n          newColors[which[i]] = this.colorOptions[newColor[i]];\n        }\n\n        this.setState({\n          gridColors: newColors\n        });\n      },\n      getLightColor: which => {\n        return this.state.gridColors[which];\n      },\n      setPosition: i => {\n        this.setState({\n          selectorIndex: i\n        });\n      },\n      getOpposite: () => {\n        //figure out which position is opposite\n        //and set that\n        let opp = this.state.selectorIndex;\n        /*\n        0 1 \n        2 3\n         0 -> 3\n        3 -> 0\n        1 -> 2\n        2 -> 1\n        */\n\n        let a,\n            b = 0;\n        opp <= 1 ? //determine DIRECTION to move\n        a = 1 : a = -1;\n        Math.abs(1.5 - opp) < 1 ? //determine DISTANCE to move\n        b = 1 : b = 3;\n        opp += a * b;\n        return opp;\n      },\n      generateRandomColor: () => {\n        return Math.floor(Math.random() * this.colorOptions.length);\n      }\n    };\n    this.colorOptions = [\"black\", //black is first\n    \"white\", //white is second \n    \"yellow\", \"lightblue\", \"coral\", \"turquoise\", \"magenta\"];\n    this.state = {\n      gridColors: [\"red\", \"orange\", \"red\", \"red\"],\n      selectorIndex: 0,\n      direction: 1\n    }; //bind everything\n\n    for (let _ref of Object.entries(this.actions)) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      let key = _ref2[0];\n      let value = _ref2[1];\n      this.actions[key].bind(this);\n    }\n\n    for (let _ref3 of Object.entries(this.internal)) {\n      var _ref4 = _slicedToArray(_ref3, 2);\n\n      let key = _ref4[0];\n      let value = _ref4[1];\n      this.internal[key].bind(this);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"link\", {\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.css\",\n      rel: \"stylesheet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), React.createElement(LightGrid, {\n      colors: this.state.gridColors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), React.createElement(ButtonContainer, {\n      actions: this.actions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mymac/dev/vschool/assignments/3-module/src/apps/dj/App.js"],"names":["React","ReactDOM","LightGrid","ButtonContainer","App","Component","constructor","props","actions","console","log","newColor","state","gridColors","selectorIndex","colorOptions","internal","getOpposite","setColor","advance","generateRandomColor","reverse","prevIndex","oppIndex","colorPrevIndex","indexOf","colorOppIndex","length","newIndex","dir","direction","setPosition","newDirection","setState","which","newColors","i","getLightColor","opp","a","b","Math","abs","floor","random","Object","entries","key","value","bind","render"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport LightGrid from \"./components/LightGrid\"\nimport ButtonContainer from \"./components/ButtonContainer\"\nimport \"./styles.css\"\n// import url(\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.css\")\n\nclass App extends React.Component{\n    constructor(props){\n        super(props)\n\n        this.state = {\n            gridColors: [\"red\", \"orange\", \"red\", \"red\"],\n            selectorIndex: 0,\n            direction: 1,\n        }\n\n        //bind everything\n        for (let [key, value] of Object.entries(this.actions)) {\n            this.actions[key].bind(this)\n        }\n\n        for (let [key, value] of Object.entries(this.internal)) {\n            this.internal[key].bind(this)\n        }\n    }\n\n    render(){\n        return(\n            <div id=\"app\">\n                <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.css\" rel=\"stylesheet\"></link>\n                <LightGrid colors={this.state.gridColors}/>\n                <ButtonContainer actions={this.actions}/>\n            </div>\n        )\n    }\n\n\n    actions = {\n        \"mask\": ()=>{ console.log(\"mask\")/*make active + opposite black, if either black then both white*/\n            let newColor = 0;\n                if(this.state.gridColors[this.state.selectorIndex] === this.colorOptions[0]\n                || this.state.gridColors[this.internal.getOpposite()] === this.colorOptions[0])\n                    newColor = 1;\n\n            this.internal.setColor(\n                    [this.state.selectorIndex, this.internal.getOpposite()], \n                    [newColor, newColor]\n            )\n\n            this.internal.advance()\n        },\n\n        \"spider\": ()=>{ /*Random color, switch direction*/\n            this.internal.setColor([this.state.selectorIndex],[this.internal.generateRandomColor()])\n            this.internal.reverse();\n            this.internal.advance();\n        },\n\n        \"camera\": ()=>{\n            /*opposite + previous shift back one color \n                we're pretending previous position is index - 1 (spoiler: it's not)\n                because I'm lazy.\n                I could definitely write this correctly if I wanted to.\n            */\n            \n           let prevIndex = this.state.selectorIndex - 1;\n           let oppIndex = this.internal.getOpposite()\n        \n\n            //get the current colors\n            let colorPrevIndex = this.colorOptions.indexOf(this.state.gridColors[prevIndex]) \n            let colorOppIndex = this.colorOptions.indexOf(this.state.gridColors[oppIndex])\n            \n\n            //shift the current colors back one\n            //(or loop around if color is at index 0)\n            colorPrevIndex > 0 ?\n                colorPrevIndex--:\n                colorPrevIndex = this.colorOptions.length;\n\n            colorOppIndex > 0 ?\n                colorOppIndex--:\n                colorOppIndex = this.colorOptions.length;\n                \n\n\n            this.internal.setColor(\n                [prevIndex, oppIndex],\n                [colorPrevIndex, colorOppIndex]\n            )\n\n            this.internal.advance();\n        \n        },\n        \"kiwi\": ()=>{console.log(/*adjacent green */)\n        }, \n        \"lemon\": ()=>{console.log(/*yellow, switch to opposite */)\n        },\n        \"death\": ()=>{console.log(/*make black, if black adjacent black*/)\n        },\n        \"d20\": ()=>{console.log(/*all random color, switch to opposite */)\n        },\n    }\n\n    internal = {\n        advance: ()=>{\n            /*\n                grid layout\n                0 1\n                2 3\n\n                desired movements (opposite if direction reversed)\n                0 -> 1\n                1 -> 3\n                2 -> 0\n                3 -> 2\n            */\n\n            let newIndex = this.state.selectorIndex\n            let dir = this.state.direction === 1 && true;\n\n            switch (newIndex){\n                case 0:\n                    newIndex = dir ? 1: 3;\n                    break;\n                case 1:\n                    newIndex = dir? 3: 0;\n                    break;\n                case 2:\n                    newIndex = dir? 0: 3;\n                    break;\n                case 3:\n                    newIndex = dir? 2: 1;\n                    break;\n            }\n\n            this.internal.setPosition(newIndex);\n        },\n\n        reverse: ()=>{\n            let newDirection = -1; //1 is forwards, -1 is backwards\n\n            if(this.state.direction === -1)\n                newDirection = 1;\n\n            this.setState({\n                direction: newDirection\n            })\n            \n        },\n\n        setColor: (which, newColor)=>{\n            console.log(\"Setting-\", ...which, \"to\", ...newColor)\n            let newColors = [...this.state.gridColors]\n\n            for(let i = 0; i < which.length; i++){\n                newColors[which[i]] = this.colorOptions[newColor[i]]\n            }\n            this.setState(\n                {\n                    gridColors: newColors\n                }\n            )\n        },\n\n        getLightColor: (which)=>{\n            return(this.state.gridColors[which])\n        },\n\n        setPosition: (i)=>{\n            this.setState({\n                selectorIndex: i\n            })\n        },\n\n        getOpposite: ()=>{\n            //figure out which position is opposite\n            //and set that\n            let opp = this.state.selectorIndex;\n            /*\n            0 1 \n            2 3\n\n            0 -> 3\n            3 -> 0\n            1 -> 2\n            2 -> 1\n            */\n\n           let a, b = 0;\n\n            opp <= 1 ? //determine DIRECTION to move\n                a = 1:\n                a = -1;\n            \n            Math.abs(1.5 - opp) < 1? //determine DISTANCE to move\n                b = 1:\n                b = 3;\n\n            opp += a * b;\n            return opp;\n        },\n\n        generateRandomColor: ()=>{\n            return Math.floor(Math.random() * this.colorOptions.length);\n        },\n    }\n\n    colorOptions = [\n        \"black\", //black is first\n        \"white\", //white is second \n        \"yellow\",\n        \"lightblue\",\n        \"coral\",\n        \"turquoise\",\n        \"magenta\",\n    ]\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}