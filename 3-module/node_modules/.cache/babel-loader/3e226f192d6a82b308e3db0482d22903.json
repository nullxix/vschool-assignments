{"ast":null,"code":"var _jsxFileName = \"/Users/mymac/dev/vschool/assignments/3-module/src/apps/grid-selector/components/Grid.js\";\nimport React from \"react\";\nimport GridDot from \"./GridDot\";\nimport GridDotEvil from \"./GridDotEvil\";\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleKeyPress = event => {\n      let newIndex = this.state.selectorIndex;\n      let gridHeight = 4;\n\n      let tryNewIndex = i => {\n        if (newIndex + i >= 0 && newIndex + i < this.state.gridDotCount) {\n          //new index is within bounds\n          return newIndex += i;\n        } else {\n          if (newIndex + i >= 0) {\n            //new index is above bounds\n            return newIndex = newIndex - (this.state.gridDotCount - i);\n          } else {\n            //new index is below bounds\n            console.log(\"current:\", this.state.gridDotCount, i, newIndex);\n            return newIndex = this.state.gridDotCount + (i + newIndex);\n          }\n        }\n      };\n\n      switch (event.key) {\n        case \"a\":\n          //left\n          console.log(tryNewIndex(-4));\n          break;\n\n        case \"w\":\n          //up\n          console.log(tryNewIndex(-1));\n          break;\n\n        case \"d\":\n          //right\n          console.log(tryNewIndex(4));\n          break;\n\n        case \"s\":\n          //down\n          console.log(tryNewIndex(1));\n          break;\n      }\n\n      let newState = this.state;\n      newState.selectorIndex = newIndex;\n      this.setState(newState);\n    };\n\n    this.state = {\n      selectorIndex: 11,\n      gridDotCount: 64\n    };\n    document.body.addEventListener(\"keypress\", this.handleKeyPress);\n  }\n\n  render() {\n    let dotArray = Array(this.state.gridDotCount).fill(null).map((ele, i) => {\n      let isSelected = this.state.selectorIndex === i ? true : false;\n      let returnMe; // isSelected ?\n      //     returnMe = <GridDot key={\"grid-dot\"+i} temp={(isSelected ? \"XXX\" : i)} selected={isSelected}/>\n      //     : returnMe = <GridDotEvil key={\"grid-dot\"+i} temp={(isSelected ? \"XXX\" : i)} selected={isSelected}/>;\n\n      let newClassName;\n      returnMe = React.createElement(GridDot, {\n        key: \"grid-dot\" + i,\n        temp: isSelected ? \"XXX\" : i,\n        selected: isSelected,\n        class: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      });\n      return returnMe;\n    });\n    return React.createElement(\"div\", {\n      id: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, dotArray);\n  }\n\n}\n\nexport default Grid;","map":{"version":3,"sources":["/Users/mymac/dev/vschool/assignments/3-module/src/apps/grid-selector/components/Grid.js"],"names":["React","GridDot","GridDotEvil","Grid","Component","constructor","props","handleKeyPress","event","newIndex","state","selectorIndex","gridHeight","tryNewIndex","i","gridDotCount","console","log","key","newState","setState","document","body","addEventListener","render","dotArray","Array","fill","map","ele","isSelected","returnMe","newClassName"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport GridDot from \"./GridDot\"\nimport GridDotEvil from \"./GridDotEvil\"\n\nclass Grid extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            selectorIndex: 11,\n            gridDotCount: 64\n        }\n        document.body.addEventListener(\"keypress\",this.handleKeyPress)\n    }\n\n\n    handleKeyPress = (event) => {\n        let newIndex = this.state.selectorIndex;\n        let gridHeight = 4;\n\n        let tryNewIndex = (i) => {\n            if(newIndex + i >= 0 && newIndex + i < this.state.gridDotCount){\n                //new index is within bounds\n                return newIndex += i;\n            } else {\n                if(newIndex + i >= 0){\n                    //new index is above bounds\n                    return newIndex = newIndex - (this.state.gridDotCount - i);\n                } else {\n                    //new index is below bounds\n\n                     console.log(\"current:\", this.state.gridDotCount, i, newIndex)\n                    return newIndex = this.state.gridDotCount + (i + newIndex)\n                }\n            }\n        }\n\n        switch(event.key){\n            case \"a\": //left\n                    console.log(tryNewIndex(-4))\n                    break;\n            case \"w\": //up\n                    console.log(tryNewIndex(-1))\n                    break;\n            case \"d\": //right\n                    console.log(tryNewIndex(4))\n                    break;\n            case \"s\": //down\n                    console.log(tryNewIndex(1))\n                    break;\n        }\n\n        let newState = this.state;\n        newState.selectorIndex = newIndex;\n        this.setState(newState)\n    }\n\n    render(){\n\n    let dotArray = Array(this.state.gridDotCount).fill(null).map((ele, i) => {\n        let isSelected = this.state.selectorIndex === i ? true : false;\n        let returnMe;\n        // isSelected ?\n        //     returnMe = <GridDot key={\"grid-dot\"+i} temp={(isSelected ? \"XXX\" : i)} selected={isSelected}/>\n        //     : returnMe = <GridDotEvil key={\"grid-dot\"+i} temp={(isSelected ? \"XXX\" : i)} selected={isSelected}/>;\n\n        let newClassName: \"grid-dot\"\n        returnMe = <GridDot key={\"grid-dot\"+i} temp={(isSelected ? \"XXX\" : i)} selected={isSelected}class/>\n\n        return returnMe\n    })\n\n        return(\n            <div id=\"grid\">\n                {dotArray}\n            </div>\n        )\n    }\n\n\n}\n\nexport default Grid"]},"metadata":{},"sourceType":"module"}