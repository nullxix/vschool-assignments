{"ast":null,"code":"import _slicedToArray from \"/Users/mymac/dev/vschool/assignments/3-module/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mymac/dev/vschool/assignments/3-module/src/apps/dj/App.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport LightGrid from \"./components/LightGrid\";\nimport ButtonContainer from \"./components/ButtonContainer\";\nimport \"./styles.css\"; // import url(\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.css\")\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.actions = {\n      \"mask\": () => {\n        console.log(\"mask\");\n        /*make active + opposite black, if either black then both white*/\n\n        let newColor = 0;\n        if (this.state.gridColors[this.state.selectorIndex] === this.colorOptions[0] || this.state.gridColors[this.internal.getOpposite()] === this.colorOptions[0]) newColor = 1;\n        this.internal.setColor(this.state.selectorIndex, newColor);\n        this.internal.setColor(this.internal.getOpposite(), newColor);\n        this.internal.advance();\n      },\n      \"spider\": () => {\n        /*Random color, switch direction*/\n      },\n      \"camera\": () => {\n        /*opposite + previous shift back one color */\n      },\n      \"kiwi\": () => {\n        console.log();\n      },\n      \"lemon\": () => {\n        console.log();\n      },\n      \"death\": () => {\n        console.log();\n      },\n      \"d20\": () => {\n        console.log();\n      }\n    };\n    this.internal = {\n      advance: () => {\n        let newIndex = this.state.selectorIndex + this.state.direction;\n        if (newIndex >= this.state.gridColors.length) newIndex = 0; //loop back to first index\n\n        this.internal.setPosition(newIndex);\n      },\n      reverse: () => {\n        let newDirection = -1; //1 is forwards, -1 is backwards\n\n        if (this.state.direction === -1) newDirection = 1;\n        this.setState({\n          direction: newDirection\n        });\n      },\n      setColor: (which, newColor) => {\n        console.log(\"Setting-\", which, \"to\", newColor);\n        let newColors = [...this.state.gridColors];\n        newColors[which] = this.colorOptions[newColor]; //colors are stored in an array and referenced by index\n\n        this.setState({\n          gridColors: newColors\n        });\n      },\n      getLightColor: which => {\n        return this.state.gridColors[which];\n      },\n      setPosition: i => {\n        this.setState({\n          selectorIndex: i\n        });\n      },\n      getOpposite: () => {\n        //figure out which position is opposite\n        //and set that\n        let opp = this.state.selectorIndex;\n        /*\n        0 1 \n        2 3\n         0 -> 3\n        3 -> 0\n        1 -> 2\n        2 -> 1\n        */\n\n        let a,\n            b = 0;\n        opp <= 1 ? //determine DIRECTION to move\n        a = 1 : a = -1;\n        Math.abs(1.5 - opp) < 1 ? //determine DISTANCE to move\n        b = 1 : b = 3;\n        opp += a * b;\n        return opp;\n      },\n      generateRandomColor: () => {\n        return Math.floor(Math.random() * this.colorOptions.length);\n      }\n    };\n    this.colorOptions = [\"black\", //black is first\n    \"white\", //white is second \n    \"yellow\", \"lightblue\", \"coral\", \"turquoise\", \"magenta\"];\n    this.state = {\n      gridColors: Array(4),\n      selectorIndex: 0,\n      direction: 1\n    };\n\n    for (let _ref of Object.entries(this.actions)) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      let key = _ref2[0];\n      let value = _ref2[1];\n      this.actions[key].bind(this);\n    }\n\n    for (let _ref3 of Object.entries(this.internal)) {\n      var _ref4 = _slicedToArray(_ref3, 2);\n\n      let key = _ref4[0];\n      let value = _ref4[1];\n      this.internal[key].bind(this);\n    }\n\n    this.state.gridColors.map((color, i));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"link\", {\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.css\",\n      rel: \"stylesheet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), React.createElement(LightGrid, {\n      colors: this.state.gridColors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), React.createElement(ButtonContainer, {\n      actions: this.actions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mymac/dev/vschool/assignments/3-module/src/apps/dj/App.js"],"names":["React","ReactDOM","LightGrid","ButtonContainer","App","Component","constructor","props","actions","console","log","newColor","state","gridColors","selectorIndex","colorOptions","internal","getOpposite","setColor","advance","newIndex","direction","length","setPosition","reverse","newDirection","setState","which","newColors","getLightColor","i","opp","a","b","Math","abs","generateRandomColor","floor","random","Array","Object","entries","key","value","bind","map","color","render"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport LightGrid from \"./components/LightGrid\"\nimport ButtonContainer from \"./components/ButtonContainer\"\nimport \"./styles.css\"\n// import url(\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.css\")\n\nclass App extends React.Component{\n    constructor(props){\n        super(props)\n\n        this.state = {\n            gridColors: Array(4),\n            selectorIndex: 0,\n            direction: 1,\n        }\n\n        for (let [key, value] of Object.entries(this.actions)) {\n            this.actions[key].bind(this)\n        }\n\n        for (let [key, value] of Object.entries(this.internal)) {\n            this.internal[key].bind(this)\n        }\n        this.state.gridColors.map((color, i))\n    }\n\n    render(){\n        return(\n            <div id=\"app\">\n                <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.css\" rel=\"stylesheet\"></link>\n                <LightGrid colors={this.state.gridColors}/>\n                <ButtonContainer actions={this.actions}/>\n            </div>\n        )\n    }\n\n\n    actions = {\n        \"mask\": ()=>{ console.log(\"mask\")/*make active + opposite black, if either black then both white*/\n            let newColor = 0;\n                if(this.state.gridColors[this.state.selectorIndex] === this.colorOptions[0]\n                || this.state.gridColors[this.internal.getOpposite()] === this.colorOptions[0])\n                    newColor = 1;\n\n            this.internal.setColor(this.state.selectorIndex, newColor)\n            this.internal.setColor(this.internal.getOpposite(), newColor)\n            this.internal.advance()\n        },\n        \"spider\": ()=>{ /*Random color, switch direction*/\n        \n        },\n        \"camera\": ()=>{/*opposite + previous shift back one color */\n        \n        },\n        \"kiwi\": ()=>{console.log(/*adjacent green */)\n        }, \n        \"lemon\": ()=>{console.log(/*yellow, switch to opposite */)\n        },\n        \"death\": ()=>{console.log(/*make black, if black adjacent black*/)\n        },\n        \"d20\": ()=>{console.log(/*all random color, switch to opposite */)\n        },\n    }\n\n    internal = {\n        advance: ()=>{\n            let newIndex = this.state.selectorIndex + this.state.direction;\n\n            if(newIndex >= this.state.gridColors.length)\n                newIndex = 0; //loop back to first index\n    \n            this.internal.setPosition(newIndex);\n        },\n\n        reverse: ()=>{\n            let newDirection = -1; //1 is forwards, -1 is backwards\n\n            if(this.state.direction === -1)\n                newDirection = 1;\n\n            this.setState({\n                direction: newDirection\n            })\n            \n        },\n\n        setColor: (which, newColor)=>{\n            console.log(\"Setting-\", which, \"to\", newColor)\n            let newColors = [...this.state.gridColors]\n            newColors[which] = this.colorOptions[newColor] //colors are stored in an array and referenced by index\n\n            this.setState(\n                {\n                    gridColors: newColors\n                }\n            )\n        },\n\n        getLightColor: (which)=>{\n            return(this.state.gridColors[which])\n        },\n\n        setPosition: (i)=>{\n            this.setState({\n                selectorIndex: i\n            })\n        },\n\n        getOpposite: ()=>{\n            //figure out which position is opposite\n            //and set that\n            let opp = this.state.selectorIndex;\n            /*\n            0 1 \n            2 3\n\n            0 -> 3\n            3 -> 0\n            1 -> 2\n            2 -> 1\n            */\n\n           let a, b = 0;\n\n            opp <= 1 ? //determine DIRECTION to move\n                a = 1:\n                a = -1;\n            \n            Math.abs(1.5 - opp) < 1? //determine DISTANCE to move\n                b = 1:\n                b = 3;\n\n            opp += a * b;\n            return opp;\n        },\n\n        generateRandomColor: ()=>{\n            return Math.floor(Math.random() * this.colorOptions.length);\n        },\n    }\n\n    colorOptions = [\n        \"black\", //black is first\n        \"white\", //white is second \n        \"yellow\",\n        \"lightblue\",\n        \"coral\",\n        \"turquoise\",\n        \"magenta\",\n    ]\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}