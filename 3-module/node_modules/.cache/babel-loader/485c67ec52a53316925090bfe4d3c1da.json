{"ast":null,"code":"import _slicedToArray from \"/Users/mymac/dev/vschool/assignments/3-module/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mymac/dev/vschool/assignments/3-module/src/apps/dj/App.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport LightGrid from \"./components/LightGrid\";\nimport ButtonContainer from \"./components/ButtonContainer\";\nimport \"./styles.css\"; // import url(\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.css\")\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.actions = {\n      \"mask\": () => {\n        console.log(\"mask\");\n        /*make active + opposite black, if either black then both white*/\n\n        let newColor = 0;\n        this.internal.setColor(this.state.selectorIndex, 0);\n        this.internal.setColor(this.state.selectorIndex, 0);\n        this.internal.advance();\n      },\n      \"spider\": () => {\n        /*Random color, switch direction*/\n      },\n      \"camera\": () => {\n        /*opposite + previous shift back one color */\n      },\n      \"kiwi\": () => {\n        console.log();\n      },\n      \"lemon\": () => {\n        console.log();\n      },\n      \"death\": () => {\n        console.log();\n      },\n      \"d20\": () => {\n        console.log();\n      }\n    };\n    this.internal = {\n      advance: () => {\n        let newIndex = this.state.selectorIndex + this.state.direction;\n        if (newIndex >= this.state.gridColors.length) newIndex = 0; //loop back to first index\n\n        this.internal.setPosition(newIndex);\n      },\n      reverse: () => {\n        let newDirection = -1; //1 is forwards, -1 is backwards\n\n        if (this.state.direction === -1) newDirection = 1;\n        this.setState({\n          direction: newDirection\n        });\n      },\n      setColor: (which, newColor) => {\n        let newColors = [...this.state.gridColors];\n        newColors[which] = this.colorOptions[newColor]; //colors are stored in an array and referenced by index\n\n        this.setState({\n          gridColors: newColors\n        });\n      },\n      getLightColor: which => {\n        return this.state.gridColors[which];\n      },\n      setPosition: i => {\n        this.setState({\n          selectorIndex: i\n        });\n      },\n      getOpposite: () => {\n        //figure out which position is opposite\n        //and set that\n        let opp = this.state.selectorIndex;\n        /*\n        0 1 \n        2 3\n         0 -> 3\n        3 -> 0\n        1 -> 2\n        2 -> 1\n        */\n\n        let a,\n            b = 0;\n        opp <= 1 ? //determine DIRECTION to move\n        a = 1 : a = -1;\n        Math.abs(1.5 - opp) < 1 ? //determine DISTANCE to move\n        b = 1 : b = 3;\n        opp += a * b;\n        return opp;\n      },\n      generateRandomColor: () => {\n        return Math.floor(Math.random() * this.colorOptions.length);\n      }\n    };\n    this.colorOptions = [\"black\", //black is first\n    \"white\", //white is second \n    \"yellow\", \"lightblue\", \"coral\", \"turquoise\", \"magenta\"];\n    this.state = {\n      gridColors: [\"red\", \"blue\", \"red\", \"red\"],\n      selectorIndex: 0,\n      direction: 1\n    };\n\n    for (let _ref of Object.entries(this.actions)) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      let key = _ref2[0];\n      let value = _ref2[1];\n      this.actions[key].bind(this);\n    }\n\n    for (let _ref3 of Object.entries(this.internal)) {\n      var _ref4 = _slicedToArray(_ref3, 2);\n\n      let key = _ref4[0];\n      let value = _ref4[1];\n      this.internal[key].bind(this);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(\"link\", {\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.css\",\n      rel: \"stylesheet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), React.createElement(LightGrid, {\n      colors: this.state.gridColors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), React.createElement(ButtonContainer, {\n      actions: this.actions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mymac/dev/vschool/assignments/3-module/src/apps/dj/App.js"],"names":["React","ReactDOM","LightGrid","ButtonContainer","App","Component","constructor","props","actions","console","log","newColor","internal","setColor","state","selectorIndex","advance","newIndex","direction","gridColors","length","setPosition","reverse","newDirection","setState","which","newColors","colorOptions","getLightColor","i","getOpposite","opp","a","b","Math","abs","generateRandomColor","floor","random","Object","entries","key","value","bind","render"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport LightGrid from \"./components/LightGrid\"\nimport ButtonContainer from \"./components/ButtonContainer\"\nimport \"./styles.css\"\n// import url(\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.css\")\n\nclass App extends React.Component{\n    constructor(props){\n        super(props)\n\n        this.state = {\n            gridColors: [\"red\", \"blue\", \"red\", \"red\"],\n            selectorIndex: 0,\n            direction: 1,\n        }\n\n        for (let [key, value] of Object.entries(this.actions)) {\n            this.actions[key].bind(this)\n        }\n\n        for (let [key, value] of Object.entries(this.internal)) {\n            this.internal[key].bind(this)\n        }\n    }\n\n    render(){\n        return(\n            <div id=\"app\">\n                <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.css\" rel=\"stylesheet\"></link>\n                <LightGrid colors={this.state.gridColors}/>\n                <ButtonContainer actions={this.actions}/>\n            </div>\n        )\n    }\n\n\n    actions = {\n        \"mask\": ()=>{ console.log(\"mask\")/*make active + opposite black, if either black then both white*/\n            let newColor = 0;\n            \n            this.internal.setColor(this.state.selectorIndex, 0)\n            this.internal.setColor(this.state.selectorIndex, 0)\n            this.internal.advance()\n        },\n        \"spider\": ()=>{ /*Random color, switch direction*/\n        \n        },\n        \"camera\": ()=>{/*opposite + previous shift back one color */\n        \n        },\n        \"kiwi\": ()=>{console.log(/*adjacent green */)\n        }, \n        \"lemon\": ()=>{console.log(/*yellow, switch to opposite */)\n        },\n        \"death\": ()=>{console.log(/*make black, if black adjacent black*/)\n        },\n        \"d20\": ()=>{console.log(/*all random color, switch to opposite */)\n        },\n    }\n\n    internal = {\n        advance: ()=>{\n            let newIndex = this.state.selectorIndex + this.state.direction;\n\n            if(newIndex >= this.state.gridColors.length)\n                newIndex = 0; //loop back to first index\n    \n            this.internal.setPosition(newIndex);\n        },\n\n        reverse: ()=>{\n            let newDirection = -1; //1 is forwards, -1 is backwards\n\n            if(this.state.direction === -1)\n                newDirection = 1;\n\n            this.setState({\n                direction: newDirection\n            })\n            \n        },\n\n        setColor: (which, newColor)=>{\n\n            let newColors = [...this.state.gridColors]\n            newColors[which] = this.colorOptions[newColor] //colors are stored in an array and referenced by index\n\n            this.setState(\n                {\n                    gridColors: newColors\n                }\n            )\n        },\n\n        getLightColor: (which)=>{\n            return(this.state.gridColors[which])\n        },\n\n        setPosition: (i)=>{\n            this.setState({\n                selectorIndex: i\n            })\n        },\n\n        getOpposite: ()=>{\n            //figure out which position is opposite\n            //and set that\n            let opp = this.state.selectorIndex;\n            /*\n            0 1 \n            2 3\n\n            0 -> 3\n            3 -> 0\n            1 -> 2\n            2 -> 1\n            */\n\n           let a, b = 0;\n\n            opp <= 1 ? //determine DIRECTION to move\n                a = 1:\n                a = -1;\n            \n            Math.abs(1.5 - opp) < 1? //determine DISTANCE to move\n                b = 1:\n                b = 3;\n\n            opp += a * b;\n            \n            return opp;\n        },\n\n        generateRandomColor: ()=>{\n            return Math.floor(Math.random() * this.colorOptions.length);\n        },\n    }\n\n    colorOptions = [\n        \"black\", //black is first\n        \"white\", //white is second \n        \"yellow\",\n        \"lightblue\",\n        \"coral\",\n        \"turquoise\",\n        \"magenta\",\n    ]\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}